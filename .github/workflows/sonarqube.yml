name: Sonarqube with coverlet to find coverage
on:
  # trigger manually. Can be used to validate feature branches before open pull request
  workflow_dispatch:
    inputs:
      codecoveragetool:
        type: choice
        description: Code Coverage Tool
        required: true
        default: dotnet-coverage
        options:
          - dotnet-coverage
  push: 
    branches:
      - main
      
jobs:
  Application-Build-Test:
    runs-on: windows-latest
    
    steps:     
      - name: long path
        shell: pwsh
        run: |
          git config --system core.longpaths true

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3.1
      
      - name: Setup VSTest
        uses: darenm/Setup-VSTest@v1
        # with:
        #  node-version: '16'
                    
      - name: Setup .Net 3.1.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 3.1.x
          # dotnet-quality: ga
  
      - name: Install SonarQube scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Install Coverlet tool
        run: |
          echo "SONARQUBE_TEST_REPORT=/d:sonar.cs.opencover.reportsPaths=coverage.xml" >> $GITHUB_ENV
          dotnet tool install --global coverlet.console
          
      - name: Restore packages
        run: |
          nuget restore WebAppFramework.sln

      - name: Build with Release
        run: |
          msbuild WebAppFramework.sln /p:Configuration=Release -t:rebuild
      
      - name: Coverlet generate coverage
        run: coverlet D:\a\WebAppFramework\WebAppFramework\WebAppFramework.Unit.Tests\bin\Release\ --target "vstest.console.exe" --targetargs "**\*\WebAppFramework.Unit.Tests.dll /EnableCodeCoverage" -f=opencover -o="coverage.xml"
        # --collect:\`"Code Coverage\`"
      
      - name: read coverage file
        working-directory: D:\a\WebAppFramework\
        run: Get-Content -Path **\*.coverage
        
      - name: read xml file
        working-directory: D:\a\WebAppFramework\
        run: Get-Content -Path **\*.xml
      
